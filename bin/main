#!/usr/bin/env ruby

puts '
_______ _          _______             _______
|__   __(_)        |__   __|           |__   __|
   | |   _  ___ ______| | __ _  ___ ______| | ___   ___
   | |  | |/ __|______| |/ _` |/ __|______| |/ _ \ / _ \
   | |  | | (__       | | (_| | (__       | | (_) |  __/
   |_|  |_|\___|      |_|\__,_|\___|      |_|\___/ \___|
	 '
	 
puts '


'
puts "What's your name?"
user = gets.chomp
user = 'Stranger' if user == '';
puts '


'
puts "Hi #{user}, Welcome to TIC TAC TOE game"

puts '


'

# Game instructions


class Player
	$display_guide = Proc.new do 
		puts "
    "
		puts "1 | 2 | 3"
		puts '---------'
		puts "4 | 5 | 6"
		puts '---------'
		puts "7 | 8 | 9"
		puts "
    "
	end

	attr_reader :name
	attr_reader :letter

  def initialize(name, letter)
		@name = name
		@letter = letter
  end

	def self.pick_slot
    loop do
      board = Board.squares.select { |_key, value| value == '-' }
      arr1 = []
			board.each { |k, v|  arr1 << k }
			$display_guide.call
      puts "#{@name} Choose a random number from #{arr1} that represents each slot"
      @slot = gets.chomp.to_i
      break if board[@slot] == '-';
    end
    @slot
	end
end


class Board
  attr_reader :val
  @@squares = {
    1 => '-',
    2 => '-',
    3 => '-',
    4 => '-',
    5 => '-',
    6 => '-',
    7 => '-',
    8 => '-',
    9 => '-'
	}

	$display_slots = Proc.new do
		puts "#{@@squares[1]}  #{@@squares[2]}  #{@@squares[3]}"
		puts "#{@@squares[4]}  #{@@squares[5]}  #{@@squares[6]}"
		puts "#{@@squares[7]}  #{@@squares[8]}  #{@@squares[9]}"
		puts "
    "
	end
	
  def initialize
    @val = 0
  end

  def play(character, name)
    @@squares[Player.pick_slot] = character
		$display_guide.call
		$display_slots.call
    @val += 1

    # res = checkmatch(@slot)
    # puts res
    # if res == character
    # 	puts "#{name} has won"
    # 	return
    # end
  end

  def reset
    @squares = Hash.new(nil)
    attr_accessor :squares
  end

	def checkmatch(char)
		# win_combinations = [[1,2,3] [4,5,6], [7,8,9], [1,4,7], [2,5,8], [3,6,9], [1,5,9], [3,5,7]]

		# for combination in win_combinations do
		# 	if @@squares[i[0]] == char && @@squares[i[1]] == char && @@squares[i[2]] == char
		# 		return char
		# 	end
		# end

    if @@squares[1] == char && @@squares[2] == char && @@squares[3] == char
      return char
    elsif @@squares[4] == char && @@squares[5] == char && @@squares[6] == char
      return char
    elsif @@squares[7] == char && @@squares[8] == char && @@squares[9] == char
      return char
    elsif @@squares[1] == char && @@squares[4] == char && @@squares[7] == char
      return char
    elsif @@squares[2] == char && @@squares[5] == char && @@squares[8] == char
      return char
    elsif @@squares[3] == char && @@squares[6] == char && @@squares[9] == char
      return char
    elsif @@squares[1] == char && @@squares[5] == char && @@squares[9] == char
      return char
    elsif @@squares[3] == char && @@squares[5] == char && @@squares[7] == char
      return char
    end
  end

  def self.squares
    @@squares
  end
end

class Scoreboard
  attr_reader :x_score
  attr_reader :o_score

  def initialize
    @x_score = 0
    @o_score = 0
  end

  def increment_score(char)
    @x_score += 1 if char == 'X'
    @o_score += 1 if char == 'O'
  end
end

# class Game; end

class Tournament
  attr_accessor :limit
  def initialize(limit)
      @limit = limit
  end
end


class AutoPlayer < Player
	def self.pick_slot
		board = Board.squares.select { |_key, value| value == '-' }
		arr1 = []
		board.each { |k, v|  arr1 << k }
		$display_guide.call
		puts "its #{@name} turn to choose a random number from #{arr1}"
		loop do
			$slot = arr1.sample
			break if board[$slot] == '-';
		end
		$slot
	end
end

class AutoBoard < Board
	def play(character, name)
		@@squares[AutoPlayer.pick_slot] = character
		puts $slot
		$display_guide.call
		$display_slots.call

    @val += 1
    # if @val == 10
    # 	return
    # end
    # res = checkmatch(@slot)
    # puts res
    # if res == character
    # 	puts "#{name} has won"
    # 	return
    # end
  end
end
 

def init
  puts "Are you ready?"
  puts "hit p to continue"
  pl = gets.chomp
  while pl.downcase != 'p'
    puts "hit p to continue"
    pl = gets.chomp
  end
  puts "How many players?"
  no_of_players = gets.chomp.to_i
  while no_of_players > 2 || no_of_players < 1
    puts "you can only have 1 or 2 players"
    puts "How many players?"
    no_of_players = gets.chomp.to_i
  end
  no_of_players
end

$players_num = init

def get_details
  puts "player1, whats your name?"
  name1 = gets.chomp
  name1 = 'user1' if name1 == ''
  $letter2 = nil

  if $players_num == 2
    loop do
      puts "player1, choose 'X' or 'O'?"
			$letter1 = gets.chomp.upcase
			break if $letter1 == 'X' || $letter1 == 'O'
			puts "You cannot choose any other character except 'X' or 'O'"
    end
    $letter2 = $letter1 == 'X' ? 'O' : 'X'

    puts "player2, whats your name?"
    name2 = gets.chomp
    name2 = user2 if name2 == ''
    $player1 = Player.new(name1, $letter1)
		$player2 = Player.new(name2, $letter2)
		
	elsif $players_num == 1
    loop do
      puts "player1, choose 'X' or 'O'?"
      $letter1 = gets.chomp.upcase
			break if $letter1 == 'X' || $letter1 == 'O'
			puts "You cannot choose any other character except 'X' or 'O'"
    end
		$letter2 = $letter1 == 'X' ? 'O' : 'X'
		
		name2 = ['Ruby', 'Micheal', 'John Doe'].sample
    $player1 = Player.new(name1, $letter1)
    $player2 = AutoPlayer.new(name2, $letter2)
  end
end
get_details


# def tournament
#   puts "Are you playing a tournament? type 'y' for YES or 'n' for NO"
#   tour = gets.chomp.downcase
#   if tour == 'y'
#     loop do
#       puts "how many games do you want to play at a goal? put in a number between 1 and 5"
#       $t = gets.chomp.to_i
# 			break if $t.class == Integer && ($t > 1 && $t < 5)
# 			puts "The game is only limited to 5 games"
#     end
#     tournament1 = Tournament.new($t)
#     tournament1
#   else
#     puts "You can play for as long as you like!!"
#   end
# end
# $tournament = tournament


def player(*opponents)
	opponents
end

players = player($player1, $player2)

puts $player1.name
puts $player1.letter
puts $player2.name
puts $player2.letter


def runGame(player1, player2)
  tictac = Board.new
	score = Scoreboard.new
	tictactoe = AutoBoard.new
  # if !$tournament.nil?
  # end
  display_score = lambda do
    puts "Score:"
    print score.x_score
    print "    X"
    print "     "
    print score.o_score
    print "    O"
    puts "      "
  end
	loop do
    tictac.play(player1.letter, player1.name)
    win = tictac.checkmatch(player1.letter)
    display_score.call
    if win == player1.letter
      score.increment_score(player1.letter)
      display_score.call
      puts "#{player1.name} you have won!!"
      break
    end
		if tictac.val == 9
			puts "There was no winner"
			break
		end
		if $players_num == 1
			tictactoe.play(player2.letter, player2.name)
   	 	win1 = tictactoe.checkmatch(player2.letter)
    	display_score.call
    	if win1 == player2.letter
				score.increment_score(player2.letter)
				display_score.call
				puts "#{player2.name} you have won!!"
				break
			end
		else
			tictac.play(player2.letter, player2.name)
			win1 = tictac.checkmatch(player2.letter)
			display_score.call
			if win1 == player2.letter
				score.increment_score(player2.letter)
				display_score.call
				puts "#{player2.name} you have won!!"
				break
			end
		end
	end
end
runGame(players[0], players[1])


